// this file is utterly disgusting
// sorry

#pragma warning disable CA1416 // Validate platform compatibility
using System.Drawing;
using System.Drawing.Imaging;
using System.Text;
using Microsoft.Win32.SafeHandles;

static IEnumerable<string> SplitByLength(string s, int length)
{
    for (int i = 0; i < s.Length; i += length)
    {
        if (i + length <= s.Length)
        {
            yield return s.Substring(i, length);
        }
        else
        {
            yield return s.Substring(i);
        }
    }
}

StringBuilder main = new StringBuilder();
main.AppendLine("// autogenerated");
main.AppendLine("#pragma once");
main.AppendLine("");

Directory.GetFiles("./img", "*.png", SearchOption.AllDirectories).ToList().ForEach(file =>
{
    StringBuilder output = new StringBuilder();
    output.AppendLine("// autogenerated");
    output.AppendLine("#pragma once");
    output.AppendLine("");

    int flashByte = 0;
    int ramByte = 0;

    string headerName = Path.GetFileNameWithoutExtension(file);
    string paletteVar = $"AUTOGEN__{headerName}__palette";
    string mapVar = $"AUTOGEN__{headerName}__map";

    using Bitmap bitmap = new Bitmap(file);

    Dictionary<string, int> palette = new Dictionary<string, int>();
    int pi = 0;

    output.AppendLine($"const Color {paletteVar}[] PROGMEM = {{");
    // first is transparent
    bitmap.Palette.Entries.ToList().ForEach(x =>
    {
        if (palette.ContainsKey(x.Name)) return; // continue;
        if (pi != 0)
        {
            output.AppendLine($"    {{ {x.R.ToString().PadLeft(3)}, {x.G.ToString().PadLeft(3)}, {x.B.ToString().PadLeft(3)} }},");
            flashByte += 3;
        }
        palette.Add(x.Name, pi);
        ++pi;
    });
    // kill the trailing comma
    output.Remove(output.Length - 3, 1);
    output.AppendLine("};");
    output.AppendLine("");

    int bitsPerColor = (int)Math.Ceiling(Math.Log2(pi));
    int width = bitmap.Width;
    int height = bitmap.Height;

    output.AppendLine($"const uint16_t {mapVar}[] PROGMEM = {{");
    output.Append("    ");
    StringBuilder tape = new StringBuilder();
    int col = 0;
    for (int y = 0; y < height; ++y)
    {
        for (int x = 0; x < width; ++x)
        {
            if (!palette.TryGetValue(bitmap.GetPixel(x, y).Name, out int paletteIndex))
            {
                Console.WriteLine($"Warning - encountered a color not on the palette: {bitmap.GetPixel(x, y).Name}@({x},{y})");
                continue;
            }
            for (int i = bitsPerColor - 1; i >= 0; --i)
            {
                tape.Append((paletteIndex & (1 << i)) > 0 ? '1' : '0');
            }
        }
    }
    while (tape.Length % 16 != 0)
    {
        tape.Append("0");
    }

    // we go a little bit of endianning
    SplitByLength(string.Join("", SplitByLength(tape.ToString(), bitsPerColor).Reverse().ToArray()), 16).Reverse().ToList().ForEach(x =>
    {
        ++col;
        output.Append($"0b{x},");
        flashByte += 2;
        if (col == 8)
        {
            output.AppendLine("");
            output.Append("    ");
            col = 0;
        }
        else
        {
            output.Append(" ");
        }
    });

    if (col == 0)
    {
        // kill the trailing comma and whitespace
        output.Remove(output.Length - 7, 1);
        output.Remove(output.Length - 4, 4);
    }
    else
    {
        // kill the trailing comma and whitespace
        output.Remove(output.Length - 2, 2);
        output.AppendLine("");
    }
    
    output.AppendLine("};");
    output.AppendLine("");

    output.AppendLine($"const PaletteMap icon_{headerName} = {{");
    output.AppendLine($"    {mapVar},");
    output.AppendLine($"    {paletteVar},");
    output.AppendLine($"    {pi - 1},"); // -1 because the first color is never drawn (bg)
    output.AppendLine($"    {bitsPerColor},");
    output.AppendLine($"    {width},");
    output.AppendLine($"    {height}");
    output.AppendLine($"}};");
    ramByte += 2 + 2 + 1 + 1 + 1;
    output.AppendLine($"");
    output.AppendLine($"// approx:");
    output.AppendLine($"// * FLASH: {flashByte}B");
    output.AppendLine($"// * RAM: {ramByte}B");

    string headerFilename = $"AUTOGEN__{headerName}.h";
    using FileStream save = File.Create("output/" + headerFilename);
    save.Write(Encoding.UTF8.GetBytes(output.ToString()));
    main.AppendLine($"#include \"{headerFilename}\"");
    Console.WriteLine($"Finished processing {file} - results stored in output/{headerFilename}");
});

using FileStream save = File.Create("output/icons.h");
save.Write(Encoding.UTF8.GetBytes(main.ToString()));
Console.WriteLine($"Finished processing all images - main header created in output/icons.h");
